strata <- xmlParse("https://data.gov.au/dataset/57e2cdf0-3c6b-48ea-a8a2-182bf1567e9a/gmd")
ibrary(xml)
library(xml)
library(XML)
strata <- xmlParse("https://data.gov.au/dataset/57e2cdf0-3c6b-48ea-a8a2-182bf1567e9a/gmd")
strata <- xmlParse("https://data.gov.au/dataset/57e2cdf0-3c6b-48ea-a8a2-182bf1567e9a/gmd")
install.packages("rjson")
library("rjson")
NSW_Data <- json_file <- "https://data.gov.au/api/3/action/package_show?id=57e2cdf0-3c6b-48ea-a8a2-182bf1567e9a"
json_data <- fromJSON(file=NSW_Data)
json_data
head(json_data)
install.packages("qcc")
library(qcc)
install.packages("swirl")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
set.seed(1234)
par(mar=c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each=4), sd=.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4),sd = .2 )
plot(x,y, col=blue, pch=19, cex=2)
plot(x,y, col="blue", pch=19, cex=2)
text(x +.5, y+.5, labels = as.charactar(1:12))
text(x +.5, y+.5, labels = as.character(1:12))
text(x +.05, y+.05, labels = as.character(1:12))
plot(x,y, col="blue", pch=19, cex=2)
text(x +.05, y+.05, labels = as.character(1:12))
dataFrame <- data.frame(x =x, y=y)
dataFrame
dist(dataFrame)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
par(mar=c(1,1,1,1))
plot(hClustering)
par(mar=c(3,3,3,3))
plot(hClustering)
par(mar=c(5,5,5,5))
plot(hClustering)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
dataMatrix
heatmpa(dataMatrix)
heatmap(dataMatrix)
constantMatrix <- dataMatrixOrdered * 0
constantMatrix <- dataMatrix * 0
constantMatrix
for (i 1:dim(dataMatrix)[1] { constantMatrix[i, ] <- rep(c(0,1), each = 5)})
for (i 1:dim(dataMatrix)[1] { constantMatrix[i, ] <- rep(c(0,1), each = 5)})
for (i 1:dim(dataMatrix)[1] {
library(kernlab)
install.packages("kernlab")
library(kernlab)
install.packages("kernlab")
library(kernlab)
help("data")
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size=1, prob = .5)
help(rbinom)
head(trainIndicator)
summary(trainIndicator)
tabel(trainIndicator)
table(trainIndicator)
trainSpam <- spam[trainIndicator = 1,]
trainSpam <- spam[trainIndicator == 1,]
testSpam <- spam[trainIndicator = 0, ]
testSpam <- spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
tabe(trainSpam$type)
table(trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[,1:4]+1))
hCluster <- hclust(dist(t(log10(trainSpam[,1:55] + 1))))
plot(hCluster)
source('~/R/win-library/3.2/swirl/Courses/Exploratory_Data_Analysis/Dimension_Reduction/addPatt.R')
names(trainSpam[which.min(cvError)])
warnings()
source('~/R/win-library/3.2/swirl/Courses/Exploratory_Data_Analysis/Dimension_Reduction/addPatt.R')
names(trainSpam[which.min(cvError)])
predictionModel <- glm(numType ~ charDollar, familty = "binomial", data = trainSpam)
predictionModel <- glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionModel <- glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictedSpam <- rep("nonspam", dim(testSpam[1]))
predictedSpam = rep("nonspam", dim(testSpam[l]))
predictedSpam = rep("nonspam", dim(testSpam[1]))
predictionModel <- glm(numType ~ charDollar, family = "binomial", data = trainSpam)
predictionTest <- predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
predictedSpam[predictionModel$fitted > .5] = "spam"
table(predictedSpam, testSpam$type)
setwd("C:/Users/Mike/Documents/Projects/dataScience/ReproducibleResearch/RepData_PeerAssessment1")
library(xtable)
library(dplyr)
```
```{r processData}
#read data from file to dataframe...
activity <- read.csv(unz(description = "activity.zip", "activity.csv"))
# transform data to sumarize by day and interval...
dailyStats <- group_by(activity, date) %>% summarize(avgSteps = mean(steps,na.rm=TRUE), medianSteps = median(steps,na.rm=TRUE), totalSteps = sum(steps,na.rm=TRUE))
intervalStats <- group_by(activity, interval) %>% summarize(avgSteps = mean(steps,na.rm=TRUE), medianSteps = median(steps,na.rm=TRUE), totalSteps = sum(steps,na.rm=TRUE))
# Add a time element to the interval transformation to make intervals more intuitive (e.g. time of day)
timeInterval <- seq(as.POSIXct("2012-11-30 00:00:00"),as.POSIXct("2012-11-30 23:55:00"),by="5 mins")
intervalStats <- cbind(intervalStats, timeInterval)
interval[1,1]
intervalStats["0", 3]
intervalStats[1, 3]
intervalStats[1, 1:3]
activity[intervalStats[1,],]
intervalStats[1,]
activity[intervalStats[1,1],]
activity[intervalStats[2,1],]
intervalStats[2,1]
head(intervalStats)
activity[intervalStats[2,1],]
activity[intervalStats[1:2,1],]
activity[intervalStats[1:3,1],]
help[lapply]
help("lapply")
activity[activity$interval == intervalStats[1,]]
head(activity[activity$interval == intervalStats[1,]])
str(activity[activity$interval == intervalStats[1,]])
head(activity[activity$interval == intervalStats[1,]])
head(activity[activity$interval == intervalStats[1,1]])
head(activity[activity$interval == intervalStats[1:3,1]])
head(activity[activity$interval == intervalStats[1:3,1],])
temp <- activity[activity$interval == intervalStats[1:3,1],4] = intervalStats[1:3,1]
temp <- activity[activity$interval == intervalStats[1:3,1],4] = 1
activity[activity$interval == intervalStats[1:3,1],4]
activity[activity$interval == intervalStats[1:3,1],3]
head(activity[steps == NA,])
head(activity[activity$steps == NA,])
head(activity[activity$steps == NA,1:#])
head(activity[activity$steps == NA,1:3])
head(activity[activity$steps == NA,3])
temp <- lapply(activity, (activity$steps == NA) AND (activity$interval == intervalStats$interval), 1)
help(and)
temp <- lapply(activity, (activity$steps == NA) & (activity$interval == intervalStats$interval), 1)
temp <- lapply(activity, if((activity$steps == NA) & (activity$interval == intervalStats$interval), activity$imputted <- intervalStats$medianSteps))
temp <- lapply(activity, if((activity$steps == NA) & (activity$interval == intervalStats$interval), activity$imputted = intervalStats$medianSteps))
if((activity$steps == NA) & (activity$interval == intervalStats$interval), activity$imputted = intervalStats$medianSteps)
if((activity$steps == NA) & (activity$interval == intervalStats$interval), activity$imputted = intervalStats$medianSteps, )
if((activity$steps == NA) & (activity$interval == intervalStats$interval), activity$imputted = intervalStats$medianSteps,"x" )
if(activity$steps == NA & activity$interval == intervalStats$interval, activity$imputted = intervalStats$medianSteps, "x")
if(activity$steps == NA & activity$interval == intervalStats$interval) activity$imputted = intervalStats$medianSteps else "x"
lapply(if(activity$steps == NA & activity$interval == intervalStats$interval) activity$imputted = intervalStats$medianSteps else "x")
lapply(activity, if(activity$steps == NA & activity$interval == intervalStats$interval) activity$imputted = intervalStats$medianSteps else "x")
head(intervalStats)
head(activity)
temp <- merge(activity, intervalStats, by "interval")
temp <- merge(activity, intervalStats, by interval)
temp <- merge(activity, intervalStats)
head(temp)
help(for)
help(merge)
temp <- merge(activity, intervalStats, by.x="interval", by.y="interval)
temp <- merge(activity, intervalStats, by.x="interval", by.y="interval")
head(temp)
head(activity)
temp <- merge(activity, intervalStats, by.x="interval", by.y="interval", all=FALSE)
head(intervalStats)
head(intervalStats[,1:2])
temp <- merge(activity, intervalStats[,1:2], all=FALSE)
head(temp)
temp <- merge(activity, intervalStats[,1:3], all=FALSE)
head(temp)
write.csv(temp, file="temp")
write.csv(activcity, file="temp2")
write.csv(activity, file="temp2")
temp[is.na(temp$steps),]
str(temp[is.na(temp$steps),])
head(temp)
temp[is.na(temp$steps),]$steps
temp[is.na(temp$steps),]$steps <- temp[is.na(temp$steps),]$median
head(temp)
temp[is.na(temp$steps),]$steps
temp <- merge(activity, intervalStats[,1:3], all=FALSE)
temp[is.na(temp$steps),]$steps <- temp[is.na(temp$steps),]$medianSteps
write.csv(activity, file="temp3.csv")
write.csv(temp, file="temp3.csv")
head(activity)
head(temp)
i_activity <- merge(activity, intervalStats[,1:3], all=FALSE)
# replace observations where step is NA with the median for that interval...
i_activity[is.na(i_activity$steps),]$steps <- i_activity[is.na(i_activity$steps),]$medianSteps
i_dailyStats <- group_by(i_activity, date) %>% summarize(avgSteps = mean(steps,na.rm=TRUE), medianSteps = median(steps,na.rm=TRUE), totalSteps = sum(steps,na.rm=TRUE))
hist(i_dailyStats$totalSteps)
hist(dailyStats$totalSteps)
hist(i_dailyStats$totalSteps)
hist(dailyStats$totalSteps)
hist(i_dailyStats$totalSteps)
write.csv(i_dailyStats, file="i_d.csv")
write.csv(dailyStats, file="d.csv")
hist(i_dailyStats$totalStepsy, xlab="Total Daily Steps", main="Histogram of Daily Total Steps")
hist(i_dailyStats$totalSteps, xlab="Total Daily Steps", main="Histogram of Daily Total Steps")
help("plot")
par(mfrow = 2)
par(mfrow = c(1,2))
help("weekdays")
head(weekdays(activity$date))
head(activity)
head(weekdays(activity$date))
head(as.date(activity$date))
as.Date(activity$date)
head(weekdays(as.Date(activity$date)))
head(intervalStats)
head(weekdays(intervalStats$timeInterval))
head(weekdays(intervalStats$timeInterval, abbreviate = FALSE))
head(weekdays(intervalStats$timeInterval, abbreviate = TRUE))
lapply(intervalStats, if((weekdays(intervalStats$timeInterval, abbreviate = TRUE == "Sat") "Weekend" else "Weekday"))
lapply(intervalStats, if((weekdays(intervalStats$timeInterval, abbreviate = TRUE == "Sat") intervalStats$Weekend <- "Weekend" else "Weekday"))
lapply(intervalStats, if(weekdays(intervalStats$timeInterval, abbreviate = TRUE) == "Sat") intervalStats$Weekend <- "Weekend" else "Weekday")
head(weekdays(intervalStats$timeInterval, abbreviate = TRUE))
if(weekdays(intervalStats$timeInterval, abbreviate = TRUE) == "Sat") intervalStats$WE <- "Weekend" else "Weekday"
head(intervalStats)
if(weekdays(intervalStats$timeInterval, abbreviate = TRUE) == "Sat") intervalStats$WE <- "Weekend" else intervalStats$WE <- "Weekday"
head(intervalStats)
lapply(intervalStats, if(weekdays(intervalStats$timeInterval, abbreviate = TRUE) == "Sat") intervalStats$WE <- "Weekend" else intervalStats$WE <- "Weekday")
head(intervalStats)
write.csv((intervalStats, file="tempWE.csv"))
write.csv(intervalStats, file="tempWE.csv")
i_activity[is.na(i_activity$steps),]$steps <- i_activity[is.na(i_activity$steps),]$medianSteps
head(activity)
head(i_activity)
lapply(i_activity, if(weekdays(i_activity$date, abbreviate = TRUE) == "Sat") i_activity$WE <- "Weekend" else i_activity$WE <- "Weekday")
lapply(i_activity, if(weekdays(as.date(i_activity$date), abbreviate = TRUE) == "Sat") i_activity$WE <- "Weekend" else i_activity$WE <- "Weekday")
as.Date()
help(as.date)
lapply(i_activity, if(weekdays(as.Date(i_activity$date), abbreviate = TRUE) == "Sat") i_activity$WE <- "Weekend" else i_activity$WE <- "Weekday")
head(i_activity)
lapply(i_activity, if(weekdays(as.Date(i_activity$date), abbreviate = TRUE) == "Sat") i_activity$WE = "Weekend" else i_activity$WE = "Weekday")
apply(i_activity, if(weekdays(as.Date(i_activity$date), abbreviate = TRUE) == "Sat") i_activity$WE = "Weekend" else i_activity$WE = "Weekday")
lapply(i_activity, function(x) if(weekdays(as.Date(x$date), abbreviate = TRUE) == "Sat") {"Weekend"} else {"Weekday"})
lapply(i_activity$date, function(x) if(weekdays(as.Date(x), abbreviate = TRUE) == "Sat") {"Weekend"} else {"Weekday"})
head(i_activity)
i_activity$WE <- NULL
head(i_activity)
i_activity$WE <- lapply(i_activity$date, function(x) if(weekdays(as.Date(x), abbreviate = TRUE) == "Sat") {"Weekend"} else {"Weekday"})
head(i_activity)
write.csv(i_activity, file="temp.csv")
write.csv(i_activity, file="temp.csv")
str(i_activity)
class(i_activity)
summary(i_activity)
head(i_activity )
str(i_activity)
str(i_activity)
head(i_activity)
class(i_activity$WE)
class(i_activity$date)
i_activity$WE <- lapply(i_activity$date, function(x) if(weekdays(as.Date(x), abbreviate = TRUE) == "Sat") "Weekend" else "Weekday")
class(i_activity$WE)
write.csv(i_activity, file="temp.csv")
help(lapply)
i_activity$WE <- sapply(i_activity$date, function(x) if(weekdays(as.Date(x), abbreviate = TRUE) == "Sat") "Weekend" else "Weekday")
class(i_activity$WE)
write.csv(i_activity, file="temp.csv")
help(or)
i_activity$WE <- sapply(i_activity$date, function(x) if(weekdays(as.Date(x), abbreviate = TRUE) == "Sat" | weekdays(as.Date(x), abbreviate = TRUE) == "Sun") "Weekend" else "Weekday")
head(i_activity)
i_intervalStats <- group_by(i_activity, WE, interval) %>% summarize(avgSteps = mean(steps,na.rm=TRUE), medianSteps = median(steps,na.rm=TRUE), totalSteps = sum(steps,na.rm=TRUE))
head(i_intervalStats)
write.csv(i_activity, file="temp.csv")
write.csv(i_intervalStats, file="temp2.csv")
plot(i_intervalStats$timeInterval, i_intervalStats$avgSteps, type="l", ylab="Avg Number of Steps", xlab="5-minute interval in time of day (24 hour)", sub="includes umputed values", main="Average steps per 5-min interval across all days")
head(i_intervalStats)
plot(i_intervalStats$interval, i_intervalStats$avgSteps, type="l", ylab="Avg Number of Steps", xlab="5-minute interval in time of day (24 hour)", sub="includes umputed values", main="Average steps per 5-min interval across all days")
par(mfrow = c(1,2))
plot(i_intervalStats$interval, i_intervalStats$avgSteps, type="l", ylab="Avg Number of Steps", xlab="5-minute interval in time of day (24 hour)", sub="includes umputed values", main="Average steps per 5-min interval across all days")
par(mfrow = c(2,1))
plot(i_intervalStats$interval, i_intervalStats$avgSteps, type="l", ylab="Avg Number of Steps", xlab="5-minute interval in time of day (24 hour)", sub="includes umputed values", main="Average steps per 5-min interval across all days")
plot()
plot(1,1)
plot92,2
plot(2,2)
plot(i_intervalStats$interval, i_intervalStats$avgSteps, type="l", ylab="Avg Number of Steps", xlab="5-minute interval in time of day (24 hour)", sub="includes umputed values", main="Average steps per 5-min interval across all days")
ggplot(intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=3, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(. ~ WE) + ggtitle("Average Steps per 5-min interval")
library(ggplot2)
library(ggplot2)
ggplot(intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=3, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(. ~ WE) + ggtitle("Average Steps per 5-min interval")
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=3, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(. ~ WE) + ggtitle("Average Steps per 5-min interval")
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=3, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(. ~ WE) + ggtitle("Average Steps per 5-min interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(. ~ WE) + ggtitle("Average Steps per 5-min interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(. ~ WE) + ggtitle("Average Steps per 5-min Interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
help(ggplot)
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(WE ~ .) + ggtitle("Average Steps per 5-min Interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(WE ~ ., labeller = label_both) + ggtitle("Average Steps per 5-min Interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(WE ~ ., labeller =  label_bquote(cols = WE)) + ggtitle("Average Steps per 5-min Interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(WE ~ ., switch="both") + ggtitle("Average Steps per 5-min Interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(WE ~ ., switch="y") + ggtitle("Average Steps per 5-min Interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(WE ~ ., labeller = label_both) + ggtitle("Average Steps per 5-min Interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
ggplot(i_intervalStats, aes(interval, avgSteps)) + geom_line(size=1.1, color="Blue") + geom_point(size=1, shape=21, color="DarkBlue", bg="LightBlue") + facet_grid(WE ~ .) + ggtitle("Average Steps per 5-min Interval") + theme_bw() + theme(strip.background = element_rect(fill="indianred"), panel.grid.minor.y = element_line(colour="pink"), panel.grid.major.y = element_line(colour="pink"), panel.grid.major.x = element_line(colour="pink"), panel.grid.minor.x = element_blank())
